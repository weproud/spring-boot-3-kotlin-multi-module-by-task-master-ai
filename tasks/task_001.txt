# Task ID: 1
# Title: Gradle Multi Module 설계
# Status: pending
# Dependencies: None
# Priority: high
# Description: Spring Boot 3와 Kotlin을 사용하는 애플리케이션의 Gradle 멀티 모듈 구조를 설계하고 구현합니다. 관심사 분리와 모듈화를 통해 코드의 재사용성과 유지보수성을 높이는 구조를 만듭니다.
# Details:
1. 프로젝트 루트에 settings.gradle.kts 파일 생성 및 설정
```kotlin
rootProject.name = "spring-boot-3-kotlin-app"

include(
    "app:app-api",
    "app:app-batch",
    "core",
    "domain:rds",
    "framework:client:base",
    "framework:client:build",
    "framework:client:kakao",
    "framework:provider:auth",
    "framework:provider:jwt",
    "framework:redis"
)
```

2. 루트 build.gradle.kts 파일 설정
```kotlin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("org.springframework.boot") version "3.1.0" apply false
    id("io.spring.dependency-management") version "1.1.0" apply false
    kotlin("jvm") version "1.8.21"
    kotlin("plugin.spring") version "1.8.21" apply false
    kotlin("plugin.jpa") version "1.8.21" apply false
}

allprojects {
    group = "com.example"
    version = "0.0.1-SNAPSHOT"
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply(plugin = "kotlin")
    
    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        
        testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }
    
    tasks.withType<KotlinCompile> {
        kotlinOptions {
            freeCompilerArgs = listOf("-Xjsr305=strict")
            jvmTarget = "17"
        }
    }
    
    tasks.withType<Test> {
        useJUnitPlatform()
    }
}
```

3. 각 모듈별 build.gradle.kts 파일 생성

- app/app-api/build.gradle.kts
```kotlin
plugins {
    id("org.springframework.boot")
    id("io.spring.dependency-management")
    kotlin("plugin.spring")
}

dependencies {
    implementation(project(":core"))
    implementation(project(":domain:rds"))
    implementation(project(":framework:provider:jwt"))
    implementation(project(":framework:redis"))
    
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0")
    
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
}
```

- core/build.gradle.kts
```kotlin
plugins {
    id("org.springframework.boot") apply false
    id("io.spring.dependency-management")
    kotlin("plugin.spring")
}

dependencies {
    api("org.springframework.boot:spring-boot-starter")
    api("com.fasterxml.jackson.module:jackson-module-kotlin")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-core")
}

tasks.bootJar { enabled = false }
tasks.jar { enabled = true }
```

- domain/rds/build.gradle.kts
```kotlin
plugins {
    id("org.springframework.boot") apply false
    id("io.spring.dependency-management")
    kotlin("plugin.spring")
    kotlin("plugin.jpa")
}

dependencies {
    implementation(project(":core"))
    
    api("org.springframework.boot:spring-boot-starter-data-jpa")
    runtimeOnly("com.mysql:mysql-connector-j")
    runtimeOnly("com.h2database:h2")
    
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.bootJar { enabled = false }
tasks.jar { enabled = true }
```

4. 각 모듈 디렉토리 구조 생성
- 각 모듈 디렉토리에 src/main/kotlin 및 src/test/kotlin 디렉토리 생성
- 각 모듈에 필요한 패키지 구조 생성

5. 모듈 간 의존성 관리
- 순환 의존성이 발생하지 않도록 의존성 그래프 설계
- 상위 모듈은 하위 모듈에 의존할 수 있지만, 하위 모듈은 상위 모듈에 의존하지 않도록 설계

6. 공통 설정 및 유틸리티 클래스 구현
- core 모듈에 공통으로 사용되는 유틸리티 클래스 및 확장 함수 구현
- 각 모듈에서 필요한 설정 클래스 구현

# Test Strategy:
1. 모듈 구조 검증
- 각 모듈이 올바르게 구성되었는지 확인
- 모듈 간 의존성이 올바르게 설정되었는지 확인

2. 빌드 검증
- Gradle 빌드 명령어를 실행하여 전체 프로젝트가 오류 없이 빌드되는지 확인
```bash
./gradlew clean build
```

3. 모듈별 단위 테스트
- 각 모듈의 핵심 기능에 대한 단위 테스트 작성 및 실행
- 테스트 커버리지 확인

4. 통합 테스트
- 모듈 간 통합 테스트를 통해 의존성 문제가 없는지 확인
- app-api 모듈을 실행하여 전체 애플리케이션이 정상적으로 동작하는지 확인

5. 모듈 독립성 테스트
- 각 모듈이 독립적으로 빌드되고 테스트될 수 있는지 확인
```bash
./gradlew :core:test
./gradlew :domain:rds:test
```

# Subtasks:
## 1. 루트 프로젝트 설정 파일 생성 [pending]
### Dependencies: None
### Description: 프로젝트의 루트 설정 파일인 settings.gradle.kts와 build.gradle.kts를 생성하고 플러그인 관리 및 공통 설정을 구성합니다.
### Details:
1. Create settings.gradle.kts with the project name and module includes
2. Set up root build.gradle.kts with Kotlin and Spring Boot plugin versions
3. Configure common settings for all subprojects including Kotlin compiler options
4. Set up repositories and basic dependencies for all modules
<info added on 2025-05-21T05:26:31.927Z>
프로젝트의 루트 설정 파일인 settings.gradle.kts와 build.gradle.kts를 생성하고 플러그인 관리 및 공통 설정을 구성합니다.
</info added on 2025-05-21T05:26:31.927Z>

## 2. Core 모듈 구현 [pending]
### Dependencies: 1.1
### Description: 다른 모듈에서 공통으로 사용되는 유틸리티, 확장 함수 및 기본 컴포넌트를 포함하는 Core 모듈을 생성하고 구성합니다.
### Details:
1. Create core/build.gradle.kts with appropriate plugins and dependencies
2. Disable bootJar and enable jar tasks
3. Set up directory structure (src/main/kotlin, src/test/kotlin)
4. Implement common utility classes, extension functions, and base components
5. Create base exception classes and common DTOs

## 3. Domain RDS 모듈 구현 [pending]
### Dependencies: 1.2
### Description: 데이터베이스 엔티티, 레포지토리 및 JPA 설정을 위한 Domain RDS 모듈을 구성합니다.
### Details:
1. Create domain/rds/build.gradle.kts with JPA and database dependencies
2. Configure JPA entities with appropriate annotations
3. Implement repository interfaces extending Spring Data repositories
4. Set up test configurations with H2 database
5. Configure entity mappings and relationships

## 4. Framework Client 모듈 구현 [pending]
### Dependencies: 1.2
### Description: 외부 API 통합을 위한 Framework Client 모듈(base, build, kakao)을 생성합니다.
### Details:
1. Set up build.gradle.kts files for each client module
2. Implement the base client module with common HTTP client configurations
3. Create the build client module with client factory patterns
4. Implement the Kakao client module with specific API integrations
5. Configure proper error handling and response mapping

## 5. Framework Provider 모듈 구현 [pending]
### Dependencies: 1.2
### Description: 인증 및 권한 부여를 위한 Framework Provider 모듈(auth, jwt)을 생성합니다.
### Details:
1. Set up build.gradle.kts files for auth and jwt modules
2. Implement JWT generation, validation, and parsing in the jwt module
3. Create authentication providers and security configurations in the auth module
4. Implement user details service and security filters
5. Configure proper exception handling for authentication failures

## 6. Framework Redis 모듈 구현 [pending]
### Dependencies: 1.2
### Description: 캐싱 및 분산 데이터 저장을 위한 Redis 모듈을 생성합니다.
### Details:
1. Create framework/redis/build.gradle.kts with Redis dependencies
2. Implement Redis configuration classes
3. Create Redis repositories and template wrappers
4. Implement serialization/deserialization for Redis data
5. Configure cache managers and TTL settings

## 7. App API 모듈 구현 [pending]
### Dependencies: 1.3, 1.4, 1.5, 1.6
### Description: 컨트롤러, 서비스 및 API 문서화가 포함된 메인 API 애플리케이션 모듈을 생성합니다.
### Details:
1. Create app/app-api/build.gradle.kts with web dependencies
2. Implement main application class with proper component scanning
3. Create controller classes with endpoint mappings
4. Implement service layer with business logic
5. Configure OpenAPI documentation
6. Set up security configurations for API endpoints

## 8. App Batch 모듈 구현 [pending]
### Dependencies: 1.3, 1.4, 1.5, 1.6
### Description: 예약 및 배치 처리 작업을 위한 배치 애플리케이션 모듈을 생성합니다.
### Details:
1. Create app/app-batch/build.gradle.kts with Spring Batch dependencies
2. Implement batch job configurations and step definitions
3. Create job launchers and schedulers
4. Implement batch processors, readers, and writers
5. Configure batch execution tracking and error handling
6. Set up proper transaction management for batch operations

